---
Description: 'Setup an AWS EC2 Free Tier Instance with Tomcat Server and the Dependencies for Code Deploy'


AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  OperatingSystem:
    Description: Amazon EC2 operating system type (Linux or Windows).
    Type: String
    Default: Linux
    ConstraintDescription: Must be Windows or Linux.
    AllowedValues:
    - Linux  
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  KeyPairName:
    Description: Name of an existing Amazon EC2 key pair to enable SSH or RDP access
      to the instances.
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII
      characters.
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t1.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  InstanceCount:
    Description: Number of Amazon EC2 instances (Must be a number between 1 and 3).
    Type: Number
    Default: '1'
  SSHLocation:
    Description: The IP address range that can be used to connect using SSH or RDP
      to the Amazon EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  dbuser:
    Description: User for postgres
    Type: String
    Default: 'postgres'
  dbpassword:
    Description: Password for postgres
    Type: String
    Default: 'password'

Conditions:
  LaunchLinuxEC2Instance:
    Fn::Equals:
    - Ref: OperatingSystem
    - Linux  
    
Mappings:
    RegionOS2AMI:
      us-east-1:
        Linux: ami-246ed34c
    OS2SSHPort:
      Linux:
        SSHPort: '22'

Resources:

  CapstoneDB: 
    Type: AWS::RDS::DBInstance
    Properties:
      DBName : "capstone"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      Engine: "postgres"
      EngineVersion: "10.4"
      MasterUsername: 
        Ref: "dbuser"
      MasterUserPassword: 
          Ref: "dbpassword"
      VPCSecurityGroups:
        - Fn::GetAtt: [ SecurityGroup, GroupId ]
        
        
  LinuxEC2Instance:
    Type: AWS::EC2::Instance
    Condition: LaunchLinuxEC2Instance
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'        
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionOS2AMI
        - Ref: AWS::Region
        - Ref: OperatingSystem
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - "sudo yum remove -y java-1.7.0\n"
            - "sudo yum install -y java-1.8.0-openjdk tomcat8\n"
            - "sudo /sbin/iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\n"
            - "sudo sh -c 'echo \"spring.profiles.active=aws\" >> /usr/share/tomcat8/conf/catalina.properties'\n"
            - "sudo service tomcat8 start\n"
            - 'yum update -y aws-cfn-bootstrap

'
            - 'yum install -y aws-cli

'
            - "# Install the AWS CodeDeploy Agent.\n"
            - 'cd /home/ec2-user/

'
            - 'aws s3 cp ''s3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm''
              . || echo ''Failed to download AWS CodeDeploy Agent.''

'
            - "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to
              install AWS CodeDeploy Agent.' \n"
            - "/opt/aws/bin/cfn-init -s "
            - Ref: AWS::StackId
            - " -r LinuxEC2Instance --region "
            - Ref: AWS::Region
            - " || echo 'Failed to run cfn-init.'\n"
      KeyName:
        Ref: KeyPairName
      Tags:
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
      IamInstanceProfile:
        Ref: InstanceRoleInstanceProfile

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort:
          Fn::FindInMap:
          - OS2SSHPort
          - Ref: OperatingSystem
          - SSHPort
        ToPort:
          Fn::FindInMap:
          - OS2SSHPort
          - Ref: OperatingSystem
          - SSHPort
        CidrIp:
          Ref: SSHLocation
  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal:
            Service:
            - codedeploy.us-east-1.amazonaws.com
            - codedeploy.us-west-2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - ec2:Describe*
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - autoscaling:CompleteLifecycleAction
          - autoscaling:DeleteLifecycleHook
          - autoscaling:DescribeLifecycleHooks
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:PutLifecycleHook
          - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
      - Ref: CodeDeployTrustRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - autoscaling:Describe*
          - cloudformation:Describe*
          - cloudformation:GetTemplate
          - s3:Get*
          - cloudformation:ListStackResources*
          - rds:DescribeDBInstances
          Resource: "*"
      Roles:
      - Ref: InstanceRole
  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole


Outputs:
  CodeDeployTrustRoleARN:
    Value:
      Fn::GetAtt:
      - CodeDeployTrustRole
      - Arn        
